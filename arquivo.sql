
-- USUARIO
CREATE TABLE Usuario (
    id                  NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    nome                VARCHAR2(100),
    username            VARCHAR2(100) UNIQUE NOT NULL,
    senha               VARCHAR2(15) NOT NULL,
    id_tipo_usuario     VARCHAR2(20) -- 'admin', 'voluntario', 'profissional', 'atendido'
    telefone            VARCHAR2(20),
    id_endereco         NUMBER,
    data_nascimento     DATETIME,
    documento           VARCHAR2(20), -- CPF ou CNPJ
    id_status_usuario   NUMBER(1), -- status 0 ou 1
    CONSTRAINT fk_usuario_tipo FOREIGN KEY (id_tipo_usuario) REFERENCES Tipo_Usuario(id),
    CONSTRAINT fk_usuario_endereco FOREIGN KEY (id_endereco) REFERENCES Endereco(id),
    CONSTRAINT fk_usuario_status FOREIGN KEY (id_status_usuario) REFERENCES Status_Usuario(id)
);

-- TIPO USUARIO
CREATE TABLE Tipo_Usuario (
    id              NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    descricao       VARCHAR2(50) NOT NULL UNIQUE,   -- Ex: 'Admin', 'Voluntario', 'Profissional', 'Atendido'
);

-- STATUS USUARIO
CREATE TABLE Status_Usuario (
    id              NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    descricao       VARCHAR2(10) NOT NULL UNIQUE,   -- Ex: 'Ativo', 'Inativo'
);

-- ENDERECO
CREATE TABLE Endereco (
    id              GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    rua             VARCHAR2(100),
    numero          NUMBER,
    bairro          VARCHAR2(100),
    cidade          VARCHAR2(255),
    estado          VARCHAR2(100),
    cep             NUMBER(8),
    complemento     VARCHAR2(255)
);

-- CATEGORIA
CREATE TABLE Categoria (
    id          GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    descricao   VARCHAR2(50) NOT NULL UNIQUE  -- exemplo: 'Roupa', 'Alimento', 'Medicamento'
);

-- ABRIGO
CREATE TABLE Abrigo (
    id                  GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    capacidade_total    NUMBER,
    ocupacao_atual      NUMBER,
    descricao           VARCHAR2(200),       
);

-- DOACAO
CREATE TABLE Doacao (
    id              GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    id_abrigo       NUMBER,
    descricao       VARCHAR2(200),
    id_categoria    NUMBER,
    quantidade      NUMBER,
    CONSTRAINT fk_doacao_abrigo FOREIGN KEY (id_abrigo) REFERENCES Abrigo(id),
    CONSTRAINT fk_doacao_categoria FOREIGN KEY (id_categoria) REFERENCES Categoria(id)
);

-- PESSOA ATENDIDA
CREATE TABLE Pessoa_Atendida (
    id                  NUMBER PRIMARY KEY,
    categoria           VARCHAR2(100),
    servico_desejado    VARCHAR2(200),
    observacoes         VARCHAR2(200),
    CONSTRAINT fk_pessoaatendida_usuario FOREIGN KEY (id) REFERENCES Usuario(id)
);

-- DISTRIBUICAO
CREATE TABLE Distribuicao (
    id                      GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    doacao_id               NUMBER,
    qtd_destinada           NUMBER,
    data_destinada          DATETIMETIME,
    id_pessoa_atendida_fk   NUMBER,
    CONSTRAINT fk_distribuicao_doacao FOREIGN KEY (doacao_id) REFERENCES Doacao(id),
    CONSTRAINT fk_distribuicao_pessoa FOREIGN KEY (id_pessoa_atendida_fk) REFERENCES Pessoa_Atendida(id)
);

-- VOLUNTARIO
CREATE TABLE Voluntario (
    id                  NUMBER PRIMARY KEY,
    categoria           VARCHAR2(50), -- Saúde, Educação, Assistência Social, etc.
    id_disponibilidade     VARCHAR2(50), -- Turno?
    CONSTRAINT fk_voluntario_usuario FOREIGN KEY (id) REFERENCES Usuario(id)
);

CREATE TABLE Categoria_Voluntario (
    id          NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    descricao   VARCHAR2(100) NOT NULL UNIQUE,   -- Ex: 'Saúde', 'Educação', 'Assistência Social'
);

-- EMPRESA PARCEIRA
CREATE TABLE EmpresaParceira (
    id                  GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    categoria           VARCHAR2(100),
    servico_oferecido   VARCHAR2(200), -- Lista com saúde, educação, assistência social, roupa, alimento, etc.
    CONSTRAINT fk_empresa_usuario FOREIGN KEY (id) REFERENCES Usuario(id)
);

-- ESPECIALIDADE
CREATE TABLE Especialidade (
    id          GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    descricao   VARCHAR2(100)
);

-- FEEDBACK
CREATE TABLE Feedback (
    id              NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nota            NUMBER,
    comentario      VARCHAR2(200),
    data_feedback   DATETIME
    id_usuario      NUMBER, -- quem esta avaliando
    id_profissional NUMBER, -- quem esta recebendo a avaliação
    id_abrigo       NUMBER, -- abrigo que esta recebendo a avaliação
    CONSTRAINT fk_feedback_usuario FOREIGN KEY (id_usuario) REFERENCES Usuario(id),
    CONSTRAINT fk_feedback_profissional FOREIGN KEY (id_profissional) REFERENCES ProfissionalSaude(id),
    CONSTRAINT fk_feedback_abrigo FOREIGN KEY (id_abrigo) REFERENCES Abrigo(id)
);

-- PROFISSIONAL SAUDE
CREATE TABLE ProfissionalSaude (
    id                  NUMBER PRIMARY KEY,
    id_especialidade    NUMBER,
    forma_atendimento   VARCHAR2(50),
    id_feedback         NUMBER,
    CONSTRAINT fk_profissional_usuario FOREIGN KEY (id) REFERENCES Usuario(id),
    CONSTRAINT fk_profissional_especialidade FOREIGN KEY (id_especialidade) REFERENCES Especialidade(id),
    CONSTRAINT fk_profissional_feedback FOREIGN KEY (id_feedback) REFERENCES Feedback(id)
);

-- MURAL EMERGENCIA
CREATE TABLE Mural_Emergencia (
    id              NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    mensagem        VARCHAR2(255),
    tipo            VARCHAR2(100), -- 0 - alerta, 1 - aviso, 2 - informação
    status_apoio    VARCHAR2(1), -- 0 - não apoiado, 1 - apoiado
    data_hora       DATETIME
);

-- TIPO MURAL EMERGENCIA
CREATE TABLE Tipo_Mural_Emergencia (
    id              NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    descricao       VARCHAR2(50) NOT NULL UNIQUE,  -- exemplo: 'Alerta', 'Aviso', 'Informação'
);

-- REGISTRO EVENTO
CREATE TABLE RegistroEvento (
    id              NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    tipo_evento     NUMBER(1),  -- 0 - doação, 1 - distribuição
    descricao       VARCHAR2(255),
    data_hora       DATETIME,
    id_usuario      NUMBER,
    localizacao     VARCHAR2(200),
    CONSTRAINT fk_evento_usuario FOREIGN KEY (id_usuario) REFERENCES Usuario(id)
);

-- TIPO EVENTO
CREATE TABLE TipoEvento (
    id          NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    descricao   VARCHAR2(255)
);